const { ApplicationCommandOptionType, ActionRowBuilder, ComponentType, SelectMenuBuilder, ChannelType, EmbedBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const suggestionChannelData = require('../../models/suggestChannel')
const annonceChannelData = require('../../models/annonceChannel')
const poolData = require('../../models/poolChannel')
const boostData = require('../../models/boostData')
const ticketData = require('../../models/ticketData')
const logsData = require('../../models/logsModel')
const welcomeData = require('../../models/welcomeData')
const { Success } = require('../../utils/Success')
const { Error } = require('../../utils/Error')
const ms = require('ms')

module.exports = {
    name: "config",
    description: "Permet de configurer Tadashi dans ce serveur",
    usage: "/config",
    example: "/config",
    category: "üî® Mod√©ration",
    permissions: ["ModerateMembers"],
    options: [
        {
            name: "info",
            description: "Permet de savoir l'information d'un configuration",
            type: ApplicationCommandOptionType.Subcommand,
            options: [
                {
                    name: "config",
                    description: "Configuration",
                    type: ApplicationCommandOptionType.String,
                    choices: [
                        {
                            name: "Suggestion",
                            value: "1"
                        },
                        {
                            name: "Annonce",
                            value: "2"
                        },
                        {
                            name: "Sondage",
                            value: "3"
                        },
                        {
                            name: "Bienvenue",
                            value: "4"
                        },
                        {
                            name: "Boost",
                            value: "5"
                        },
                        {
                            name: "Logs",
                            value: "6"
                        },
                        {
                            name: "Ticket",
                            value: "7"
                        },
                    ],
                    required: true
                }
            ],
        },
        {
            name: "delete",
            description: "Permet de supprimer une configuration",
            type: ApplicationCommandOptionType.Subcommand,
            options: [
                {
                    name: "config",
                    description: "Configuration",
                    type: ApplicationCommandOptionType.String,
                    choices: [
                        {
                            name: "Suggestion",
                            value: "1"
                        },
                        {
                            name: "Annonce",
                            value: "2"
                        },
                        {
                            name: "Sondage",
                            value: "3"
                        },
                        {
                            name: "Bienvenue",
                            value: "4"
                        },
                        {
                            name: "Boost",
                            value: "5"
                        },
                        {
                            name: "Logs",
                            value: "6"
                        },
                        {
                            name: "Ticket",
                            value: "7"
                        },
                    ],
                    required: true
                }
            ],
        },
        {
            name: "suggest",
            description: "Configurer le salon de suggestion",
            type: ApplicationCommandOptionType.Subcommand,
            options: [
                {
                    name: "channel",
                    description: "Salon",
                    type: ApplicationCommandOptionType.Channel,
                    channelTypes: [ChannelType.GuildText],
                    required: true
                }
            ]
        },
        {
            name: "logs",
            description: "Configurer le syst√®me de logs",
            type: ApplicationCommandOptionType.Subcommand,
            options: [
                {
                    name: "channel",
                    description: "Salon",
                    type: ApplicationCommandOptionType.Channel,
                    channelTypes: [ChannelType.GuildText],
                    required: true
                }
            ]
        },
        {
            name: "annonce",
            description: "Configurer le syst√®me d'annonce",
            type: ApplicationCommandOptionType.Subcommand,
            options: [
                {
                    name: "channel",
                    description: "Salon",
                    type: ApplicationCommandOptionType.Channel,
                    channelTypes: [ChannelType.GuildText, ChannelType.GuildAnnouncement],
                    required: true
                },
                {
                    name: "role",
                    description: "R√¥le √† mentionner lors de l'annonce",
                    type: ApplicationCommandOptionType.Role,
                    required: true
                }
            ]
        },
        {
            name: "pool",
            description: "Configurer le syst√®me de sondages",
            type: ApplicationCommandOptionType.Subcommand,
            options: [
                {
                    name: "channel",
                    description: "Salon",
                    type: ApplicationCommandOptionType.Channel,
                    channelTypes: [ChannelType.GuildText, ChannelType.GuildAnnouncement],
                    required: true
                },
                {
                    name: "role",
                    description: "R√¥le √† mentionner lors du sondage",
                    type: ApplicationCommandOptionType.Role,
                    required: true
                }
            ]
        },
        {
            name: "welcome",
            description: "Configurer le syst√®me de bienvenue",
            type: ApplicationCommandOptionType.Subcommand,
            options: [
                {
                    name: "channel",
                    description: "Salon",
                    type: ApplicationCommandOptionType.Channel,
                    channelTypes: [ChannelType.GuildText, ChannelType.GuildAnnouncement],
                    required: true
                },
                {
                    name: "auto_role",
                    description: "Auto r√¥le",
                    type: ApplicationCommandOptionType.Role,
                    required: false
                }
            ]
        },
        {
            name: "antispam",
            description: "Configurer le syst√®me de spam",
            type: ApplicationCommandOptionType.Subcommand,
            options: [
                {
                    name: "exception_salon",
                    description: "Salon d'exception",
                    type: ApplicationCommandOptionType.Channel,
                    channelTypes: [ChannelType.GuildText, ChannelType.GuildAnnouncement],
                    required: false
                }
            ]
        },
        {
            name: "boost",
            description: "Configurer les messages de boost",
            type: ApplicationCommandOptionType.Subcommand,
            options: [
                {
                    name: "channel",
                    description: "Salon",
                    type: ApplicationCommandOptionType.Channel,
                    channelTypes: [ChannelType.GuildText, ChannelType.GuildAnnouncement],
                    required: true
                }
            ]
        },
        {
            name: "ticket-panel",
            description: "Permet d'envoyer le panel du ticket",
            type: ApplicationCommandOptionType.Subcommand,
        },
        {
            name: "ticket",
            description: "Permet de configurer le syst√®me de ticket",
            type: ApplicationCommandOptionType.Subcommand,
            options: [
                {
                    name: "channel",
                    description: "Salon",
                    type: ApplicationCommandOptionType.Channel,
                    channelTypes: [ChannelType.GuildText, ChannelType.GuildAnnouncement],
                    required: true
                },
                {
                    name: "button_label",
                    description: "Texte a √©crire dans le bouton de cr√©ation de ticket",
                    type: ApplicationCommandOptionType.String,
                    required: true
                },
                {
                    name: "staff_role",
                    description: "R√¥le du staff",
                    type: ApplicationCommandOptionType.Role,
                    required: true
                },
                {
                    name: "members_role",
                    description: "R√¥le des membres",
                    type: ApplicationCommandOptionType.Role,
                    required: true
                },
                {
                    name: "category",
                    description: "Cat√©gorie du ticket",
                    type: ApplicationCommandOptionType.Channel,
                    channelTypes: [ChannelType.GuildCategory],
                    required: true
                },
            ]
        }
    ],
    async execute(client, interaction) {
        const { options, guild } = interaction;

        if (options.getSubcommand() === "info") {
            const config = options.getString("config")

            if (config === "1") {
                const data = await suggestionChannelData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour la configuration des suggestion")

                const embed = new EmbedBuilder()
                    .setTitle("Informations sur la configuration des suggestions")
                    .setDescription(
                        `
                        Informations sur la configuration des suggestions du serveur ${guild.name}

                        > **Salon :** ${guild.channels.cache.get(data.channelId) ? guild.channels.cache.get(data.channelId) : "Salon supprim√© ou inconnu"}
                        `
                    )
                    .setColor(client.color)

                interaction.reply({ embeds: [embed] })
            }

            if (config === "2") {
                const data = await annonceChannelData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour la configuration des suggestion")

                const embed = new EmbedBuilder()
                    .setTitle("Informations sur la configuration des annonces")
                    .setDescription(
                        `
                        Informations sur la configuration des annonces du serveur ${guild.name}

                        > **Salon :** ${guild.channels.cache.get(data.channelId) ? guild.channels.cache.get(data.channelId) : "Salon supprim√© ou inconnu"}
                        > **R√¥le :** ${guild.roles.cache.get(data.role) ? guild.roles.cache.get(data.role) : "R√¥le supprim√© ou inconnu"}
                        `
                    )
                    .setColor(client.color)

                interaction.reply({ embeds: [embed] })
            }

            if (config === "3") {
                const data = await poolData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour la configuration des sondages")

                const embed = new EmbedBuilder()
                    .setTitle("Informations sur la configuration des sondages")
                    .setDescription(
                        `
                        Informations sur la configuration des sondages du serveur ${guild.name}

                        > **Salon :** ${guild.channels.cache.get(data.channelId) ? guild.channels.cache.get(data.channelId) : "Salon supprim√© ou inconnu"}
                        > **R√¥le :** ${guild.roles.cache.get(data.role) ? guild.roles.cache.get(data.role) : "R√¥le supprim√© ou inconnu"}
                        `
                    )
                    .setColor(client.color)

                interaction.reply({ embeds: [embed] })
            }

            if (config === "4") {
                const data = await welcomeData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour la configuration des sondages")

                const embed = new EmbedBuilder()
                    .setTitle("Informations sur la configuration du syst√®me de bienvenue")
                    .setDescription(
                        `
                        Informations sur la configuration du syst√®me de bienvenue du serveur ${guild.name}

                        > **Salon :** ${guild.channels.cache.get(data.channelId) ? guild.channels.cache.get(data.channelId) : "Salon supprim√© ou inconnu"}
                        > **R√¥le :** ${guild.roles.cache.get(data.role) ? guild.roles.cache.get(data.role) : "R√¥le supprim√© ou inconnu"}
                        > **Message de bienvenue :** 
                        \`\`\`${data.msg ? data.msg : "Message non enregistrer"}\`\`\`
                        `
                    )
                    .setColor(client.color)

                interaction.reply({ embeds: [embed] })
            }


            if (config === "5") {
                const data = await boostData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour la configuration de les messages de boost")

                const embed = new EmbedBuilder()
                    .setTitle("Informations sur la configuration des messages de boost")
                    .setDescription(
                        `
                        Informations sur la configuration des messages de boost du serveur ${guild.name}

                        > **Salon :** ${guild.channels.cache.get(data.channelId) ? guild.channels.cache.get(data.channelId) : "Salon non enregistr√© ou inconnu"}
                        `
                    )
                    .setColor(client.color)

                interaction.reply({ embeds: [embed] })
            }

            if (config === "6") {
                const data = await logsData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour le syst√®me de logs")

                const embed = new EmbedBuilder()
                    .setTitle("Informations sur le syst√®me de logs")
                    .setDescription(
                        `
                        Informations sur le syst√®me de logs du serveur ${guild.name}

                        > **Salon :** ${guild.channels.cache.get(data.channelId) ? guild.channels.cache.get(data.channelId) : "Salon non enregistr√© ou inconnu"}
                        `
                    )
                    .setColor(client.color)

                interaction.reply({ embeds: [embed] })
            }

            if (config === "7") {
                const data = await ticketData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour le syst√®me de logs")

                const embed = new EmbedBuilder()
                    .setTitle("Informations sur le syst√®me de logs")
                    .setDescription(
                        `
                        Informations sur le syst√®me de logs du serveur ${guild.name}

                        > **Salon du panel :** ${guild.channels.cache.get(data.channelId) ? guild.channels.cache.get(data.channelId) : "Salon non enregistr√© ou inconnu"}
                        > **R√¥le des membres :** ${guild.roles.cache.get(data.memberRoleId) ? guild.roles.cache.get(data.memberRoleId) : "R√¥le non enregistr√© ou inconnu"}
                        > **R√¥les du staff :** ${guild.roles.cache.get(data.staffRoleId) ? guild.roles.cache.get(data.staffRoleId) : "R√¥le non enregistr√© ou inconnu"}
                        > **Cat√©gorie des tickets :** ${guild.channels.cache.get(data.categoryId) ? guild.channels.cache.get(data.categoryId).name : "Cat√©gorie non enregistr√© ou inconnu"}
                        `
                    )
                    .setColor(client.color)

                interaction.reply({ embeds: [embed] })
            }
        }


        if (options.getSubcommand() === "delete") {
            const config = options.getString("config")

            if (config === "1") {
                const data = await suggestionChannelData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour la configuration des suggestion")

                await data.delete()

                Success(interaction, "Les configuration des suggestions ont √©t√© supprim√© avec succ√®s !")
            }

            if (config === "2") {
                const data = await annonceChannelData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour la configuration des suggestion")

                await data.delete()

                Success(interaction, "Les configuration des annonces ont √©t√© supprim√© avec succ√®s !")
            }

            if (config === "3") {
                const data = await poolData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour la configuration des sondages")

                await data.delete()

                Success(interaction, "Les configuration des sondages ont √©t√© supprim√© avec succ√®s !")

            }

            if (config === "4") {
                const data = await welcomeData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour la configuration des sondages")

                await data.delete()

                Success(interaction, "Les configuration des messages de bienvenue ont √©t√© supprim√© avec succ√®s !")
            }


            if (config === "5") {
                const data = await boostData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour la configuration de les messages de boost")

                await data.delete()

                Success(interaction, "Les configuration des messages de boost ont √©t√© supprim√© avec succ√®s !")

            }


            if (config === "6") {
                const data = await logsData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour la syst√®me de logs !")

                await data.delete()

                Success(interaction, "Le syst√®me de logs a √©t√© supprim√© avec succ√®s !")
            }

            if (config === "7") {
                const data = await ticketData.findOne({ Guild: guild.id })
                if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√©s pour la syst√®me de ticket !")

                await data.delete()

                Success(interaction, "La configuration du syst√®me de ticket a √©t√© supprim√© avec succ√®s !")
            }
        }

        if (options.getSubcommand() === "suggest") {
            const channel = options.getChannel("channel")

            suggestionChannelData.findOne({ Guild: guild.id }, async (err, data) => {
                if (data) {
                    data.channelId = channel.id;
                    data.save()

                    return Success(interaction, `Le salon de suggestion a √©t√© modifi√© pour le salon ${channel} avec succ√®s !`)
                } else {
                    new suggestionChannelData({
                        Guild: guild.id,
                        channelId: channel.id
                    }).save();

                    return Success(interaction, `Le salon de suggestion a √©t√© enregister√© pour le salon ${channel} avec succ√®s !`)
                }
            })

        }

        if (options.getSubcommand() === "annonce") {
            const channel = options.getChannel("channel")
            const role = options.getRole("role")

            annonceChannelData.findOne({ Guild: guild.id }, async (err, data) => {
                if (data) {
                    data.channelId = channel.id;
                    data.role = role.id;
                    data.save()

                    return Success(interaction, `Le salon d'annonce et de r√¥le a √©t√© modifi√© pour le salon ${channel} et le r√¥le ${role} avec succ√®s !`)
                } else {
                    new annonceChannelData({
                        Guild: guild.id,
                        channelId: channel.id,
                        role: role.id
                    }).save();

                    return Success(interaction, `Le salon d'annonce et de r√¥le a √©t√© enregistr√© pour le salon ${channel} et le r√¥le ${role} avec succ√®s !`)
                }
            })
        }


        if (options.getSubcommand() === "pool") {
            const channel = options.getChannel("channel")
            const role = options.getRole("role")

            poolData.findOne({ Guild: guild.id }, async (err, data) => {
                if (data) {
                    data.channelId = channel.id;
                    data.role = role.id;
                    data.save()

                    return Success(interaction, `Le salon de sondages et de r√¥le a √©t√© modifi√© pour le salon ${channel} et le r√¥le ${role} avec succ√®s !`)
                } else {
                    new poolData({
                        Guild: guild.id,
                        channelId: channel.id,
                        role: role.id
                    }).save();

                    return Success(interaction, `Le salon de sondages et de r√¥le a √©t√© enregistr√© pour le salon ${channel} et le r√¥le ${role} avec succ√®s !`)
                }
            })
        }

        if (options.getSubcommand() === "welcome") {
            const channel = options.getChannel("channel")
            const role = options.getRole("auto_role")

            const embed = new EmbedBuilder()
                .setTitle("Configuration des messages de bienvenue")
                .setDescription("Bienvenue dans le syst√®me de configuration des messages de bienvenue personnalis√©s, afin d'enregistrer votre message de bienvenue, veuillez int√©ragir avec le bouton qui se nomme \"Enregistrer le message de bienvenue\"\n\n**Variables :**\n> `{userMention}` ‚ûî Mention de l'utilisateur\n> `{userTag}` ‚ûî Nom d'utilisateur avec le Tag\n> `{username}` ‚ûî Nom d'utilisateur\n> `{guildName}` ‚ûî Nom du serveur\n> `{memberCount}` ‚ûî Nombre de membres dans le serveur")
                .setColor(client.color)
                .setTimestamp()

            const row = new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId("welcome-msg")
                    .setLabel("Enregistrer le message de bienvenue")
                    .setStyle(ButtonStyle.Success)
            )

            if (!role) {
                welcomeData.findOne({ Guild: guild.id }, async (err, data) => {
                    if (data) {
                        data.channelId = channel.id;
                        data.save()

                        const page = await interaction.reply({
                            embeds: [
                                new EmbedBuilder()
                                    .setTitle("Voulez vous changer le message de bienvenue ?")
                                    .setColor(client.color)
                                    .setAuthor({ name: "Syst√®me de bienvenue", iconURL: `${client.user.displayAvatarURL()}` })
                            ], components: [
                                new ActionRowBuilder().addComponents(
                                    new ButtonBuilder()
                                        .setCustomId("welcome-yes")
                                        .setLabel("Oui")
                                        .setStyle(ButtonStyle.Success),

                                    new ButtonBuilder()
                                        .setCustomId("welcome-no")
                                        .setLabel("Non")
                                        .setStyle(ButtonStyle.Danger)
                                )
                            ], fetchReply: true
                        })

                        const col = await page.createMessageComponentCollector({
                            componentType: ComponentType.Button,
                            time: ms("15s")
                        })

                        col.on("collect", i => {

                            if (i.user.id !== interaction.user.id) return;

                            switch (i.customId) {

                                case "welcome-yes": {
                                    page.edit({ embeds: [embed], components: [row] })
                                }

                                    break;

                                case "welcome-no": {

                                    page.edit({
                                        content: null, embeds: [
                                            new EmbedBuilder()
                                                .setDescription("Les changements ont √©t√© enregistrer avec succ√®s !")
                                                .setColor("Green")
                                        ], components: []
                                    })

                                }

                                    break;

                            }

                        })

                        col.on("end", (collected) => {
                            if (collected.size > 0) return page.edit({ content: null, embeds: [
                                new EmbedBuilder()
                                    .setTitle("Commande annul√©.")
                                    .setColor(client.color)
                            ], components: [] })
                        })

                    } else {
                        new welcomeData({
                            Guild: guild.id,
                            channelId: channel.id,
                        }).save();

                        const page = await interaction.reply({
                            embeds: [
                                new EmbedBuilder()
                                    .setTitle("Voulez vous changer le message de bienvenue ?")
                                    .setColor(client.color)
                                    .setAuthor({ name: "Syst√®me de bienvenue", iconURL: `${client.user.displayAvatarURL()}`})
                            ], components: [
                                new ActionRowBuilder().addComponents(
                                    new ButtonBuilder()
                                        .setCustomId("welcome-yes")
                                        .setLabel("Oui")
                                        .setStyle(ButtonStyle.Success),

                                    new ButtonBuilder()
                                        .setCustomId("welcome-no")
                                        .setLabel("Non")
                                        .setStyle(ButtonStyle.Danger)
                                )
                            ], fetchReply: true
                        })

                        const col = await page.createMessageComponentCollector({
                            componentType: ComponentType.Button,
                            time: ms("15s")
                        })

                        col.on("collect", i => {

                            if (i.user.id !== interaction.user.id) return;

                            switch (i.customId) {

                                case "welcome-yes": {
                                    page.edit({ embeds: [embed], components: [row] })
                                }

                                    break;

                                case "welcome-no": {

                                    page.edit({
                                        content: null, embeds: [
                                            new EmbedBuilder()
                                                .setDescription("Les changements ont √©t√© enregistrer avec succ√®s !")
                                                .setColor("Green")
                                        ], components: []
                                    })

                                }

                                    break;

                            }

                        })

                        col.on("end", (collected) => {
                            if (collected.size > 0) return page.edit({ content: null, embeds: [
                                new EmbedBuilder()
                                    .setTitle("Commande annul√©.")
                                    .setColor(client.color)
                            ], components: [] })
                        })
                    }
                })


            }

            if (role) {
                welcomeData.findOne({ Guild: guild.id }, async (err, data) => {
                    if (data) {
                        data.channelId = channel.id
                        data.role = role.id
                        data.save()

                        const page = await interaction.reply({
                            embeds: [
                                new EmbedBuilder()
                                    .setTitle("Voulez vous changer le message de bienvenue ?")
                                    .setColor(client.color)
                                    .setAuthor({ name: "Syst√®me de bienvenue", iconURL: `${client.user.displayAvatarURL()}`})
                            ], components: [
                                new ActionRowBuilder().addComponents(
                                    new ButtonBuilder()
                                        .setCustomId("welcome-yes")
                                        .setLabel("Oui")
                                        .setStyle(ButtonStyle.Success),

                                    new ButtonBuilder()
                                        .setCustomId("welcome-no")
                                        .setLabel("Non")
                                        .setStyle(ButtonStyle.Danger)
                                )
                            ], fetchReply: true
                        })

                        const col = await page.createMessageComponentCollector({
                            componentType: ComponentType.Button,
                            time: ms("15s")
                        })

                        col.on("collect", i => {

                            if (i.user.id !== interaction.user.id) return;

                            switch (i.customId) {

                                case "welcome-yes": {
                                    page.edit({ embeds: [embed], components: [row] })
                                }

                                    break;

                                case "welcome-no": {

                                    page.edit({
                                        content: null, embeds: [
                                            new EmbedBuilder()
                                                .setDescription("Les changements ont √©t√© enregistrer avec succ√®s !")
                                                .setColor("Green")
                                        ], components: []
                                    })

                                }

                                    break;

                            }

                        })

                        col.on("end", (collected) => {
                            if (collected.size > 0) return page.edit({ content: null, embeds: [
                                new EmbedBuilder()
                                    .setTitle("Commande annul√©.")
                                    .setColor(client.color)
                            ], components: [] })
                        })

                    } else {
                        new welcomeData({
                            Guild: guild.id,
                            channelId: channel.id,
                            role: role.id
                        }).save();

                        const page = await interaction.reply({
                            embeds: [
                                new EmbedBuilder()
                                    .setTitle("Voulez vous changer le message de bienvenue ?")
                                    .setColor(client.color)
                                    .setAuthor({ name: "Syst√®me de bienvenue", iconURL: `${client.user.displayAvatarURL()}`})
                            ], components: [
                                new ActionRowBuilder().addComponents(
                                    new ButtonBuilder()
                                        .setCustomId("welcome-yes")
                                        .setLabel("Oui")
                                        .setStyle(ButtonStyle.Success),

                                    new ButtonBuilder()
                                        .setCustomId("welcome-no")
                                        .setLabel("Non")
                                        .setStyle(ButtonStyle.Danger)
                                )
                            ], fetchReply: true
                        })

                        const col = await page.createMessageComponentCollector({
                            componentType: ComponentType.Button,
                            time: ms("15s")
                        })

                        col.on("collect", i => {

                            if (i.user.id !== interaction.user.id) return;

                            switch (i.customId) {

                                case "welcome-yes": {
                                    page.edit({ embeds: [embed], components: [row] })
                                }

                                    break;

                                case "welcome-no": {

                                    page.edit({
                                        content: null, embeds: [
                                            new EmbedBuilder()
                                                .setDescription("Les changements ont √©t√© enregistrer avec succ√®s !")
                                                .setColor("Green")
                                        ], components: []
                                    })

                                }

                                    break;

                            }

                        })

                        col.on("end", (collected) => {
                            if (collected.size > 0) return page.edit({ content: null, embeds: [
                                new EmbedBuilder()
                                    .setTitle("Commande annul√©.")
                                    .setColor(client.color)
                            ] ,components: [] })
                        })
                    }
                })
            }
        }


        if (options.getSubcommand() === "boost") {
            const channel = options.getChannel("channel")

            boostData.findOne({ Guild: guild.id }, async (err, data) => {
                if (data) {
                    data.channelId = channel.id
                    data.save()

                    return Success(interaction, `Le salon des messages de boost a √©t√© modifi√© pour le salon ${channel} avec succ√®s !`)
                } else {
                    new boostData({
                        Guild: guild.id,
                        channelId: channel.id
                    }).save();

                    return Success(interaction, `Le salon des messages de boost a √©t√© enregistr√© pour le salon ${channel} avec succ√®s !`)
                }
            })
        }

        if (options.getSubcommand() === "logs") {
            const channel = options.getChannel("channel")

            logsData.findOne({ Guild: guild.id }, async (err, data) => {
                if (data) {
                    data.channelId = channel.id
                    data.save()

                    return Success(interaction, `Le salon des logs a √©t√© modifi√© pour le salon ${channel} avec succ√®s !`)
                } else {
                    new logsData({
                        Guild: guild.id,
                        channelId: channel.id
                    }).save();

                    return Success(interaction, `Le salon des logs a √©t√© enregistr√© pour le salon ${channel} avec succ√®s !`)
                }
            })
        }

        if (options.getSubcommand() === "ticket") {
            const channel = options.getChannel("channel")
            const staff_role = options.getRole("staff_role")
            const members_role = options.getRole("members_role")
            const buttonLabel = options.getString("button_label")
            const category = options.getChannel("category")

            const data = await ticketData.findOne({ Guild: guild.id })

            if (data) {
                data.channelId = channel.id,
                data.staffRoleId = staff_role.id,
                data.memberRoleId = members_role.id,
                data.ButtonLabel = buttonLabel
                data.categoryId = category.id

                data.save()

                return Success(interaction, "La configuration du syst√®me de ticket a √©t√© modifi√© avec succ√®s, veuillez refaire la commande `/config ticket-panel` pour que le panel de ticket s'envoie.")
            }

            if (!data) {
                new ticketData({
                    Guild: guild.id,
                    staffRoleId: staff_role.id,
                    memberRoleId: members_role.id,
                    ButtonLabel: buttonLabel,
                    channelId: channel.id,
                    categoryId: category.id
                }).save()

                return Success(interaction, "La configuration du syst√®me de ticket a √©t√© enregistr√© avec succ√®s, veuillez faire la commande `/config ticket-panel` pour que le panel de ticket s'envoie.")
            }
        }

        if (options.getSubcommand() === "ticket-panel") {
            const data = await ticketData.findOne({ Guild: guild.id })

            if (!data) return Error(interaction, "Il n'y a pas de donn√©es enregistr√© pour le syst√®me de ticket, veuillez faire la commande `/config ticket` !")

            const channel = guild.channels.cache.get(data.channelId)

            if (!channel) return Error(interaction, "Le salon configurer est inconnu !")

            channel.send({
                embeds: [
                    new EmbedBuilder()
                        .setTitle("Cr√©er un ticket")
                        .setDescription(`Bienvenue dans le syst√®me de cr√©ation de ticket ! Pour ouvrir un ticket, veuillez int√©ragir avec le bouton qui se nomme "${data.ButtonLabel}" et un ticket s'ouvrira.`)
                        .setTimestamp()
                        .setColor(client.color)
                        .setAuthor({ name: 'Syst√®me de ticket', iconURL: `${client.user.displayAvatarURL()}` })
                ], components: [
                    new ActionRowBuilder().addComponents(
                        new ButtonBuilder()
                            .setCustomId("create-ticket")
                            .setLabel(`${data.ButtonLabel}`)
                            .setStyle(ButtonStyle.Success)
                    )
                ]
            })

            return Success(interaction, `Le panel de ticket a √©t√© envoy√© avec succ√®s dans le salon ${channel}`)
        }
    }
};